import base64
exec(base64.b64decode(b'IyAgICDYrNmF2YrYuSDYp9mE2K3ZgtmI2YIg2YTZhdi32YjYsdmKINiz2YjYsdizINiv2YrZiCDYrdi12LHZitinINmE2YfZhSDZgdmC2LcKIyAgICDYp9iw2Kcg2KrYrtmF2Lcg2KfZhNmF2YTZgSDYp9iw2YPYsSDYp9mE2K3ZgtmI2YIg2YjZg9in2KrYqNmK2Ycg2YjZhdi32YjYsdmK2Ycg2YTYpyDYqtit2LDZgSDYp9mE2K3ZgtmI2YIg2YjYqti12YrYsSDZgdin2LTZhCDwn5GNCiMgICAg2YPYqtin2KjYqSDYrdiz2YYg2YjYrNmK2LHZigoKaW1wb3J0IGFzeW5jaW8KCmZyb20gdGVsZXRob24udGwuZnVuY3Rpb25zLnVzZXJzIGltcG9ydCBHZXRGdWxsVXNlclJlcXVlc3QKCmZyb20gdXNlcmJvdCBpbXBvcnQgam10aG9uCgpmcm9tIC4uY29yZS5tYW5hZ2VycyBpbXBvcnQgZWRpdF9vcl9yZXBseQpmcm9tIC4uaGVscGVycy51dGlscyBpbXBvcnQgX2Zvcm1hdApmcm9tIC4uc3FsX2hlbHBlci5tdXRlX3NxbCBpbXBvcnQgaXNfbXV0ZWQsIG11dGUsIHVubXV0ZQpmcm9tIC4gaW1wb3J0IEJPVExPRywgQk9UTE9HX0NIQVRJRCwgZ2V0X3VzZXJfZnJvbV9ldmVudAoKcGx1Z2luX2NhdGVnb3J5ID0gImFkbWluIgoKIyA9PT09PT09PT09PT09PT09PT09INin2YTZg9mA2YDZgNmA2YDZgNmA2YDZgNmA2YDZgNmA2YDZgNiq2YUgID09PT09PT09PT09PT09PT09PT0gICMKCgpAam10aG9uLmFyX2NtZCgKICAgIHBhdHRlcm49Itio2YPZiNix2YooPzpcc3wkKShbXHNcU10qKSIsCiAgICBjb21tYW5kPSgi2KjZg9mI2LHZiiIsIHBsdWdpbl9jYXRlZ29yeSksCikKYXN5bmMgZGVmIHN0YXJ0Z211dGUoZXZlbnQpOgogICAgIlRvIG11dGUgYSBwZXJzb24gaW4gYWxsIGdyb3VwcyB3aGVyZSB5b3UgYXJlIGFkbWluLiIKICAgIGlmIGV2ZW50LmlzX3ByaXZhdGU6CiAgICAgICAgYXdhaXQgZXZlbnQuZWRpdCgiKirimbAuLi4g2YLZgNivINiq2K3ZgNiv2Ksg2KzZgdi12Kkg2LrZitixINmF2KrZiNmC2LnYqSAuLi7imbAqKiIpCiAgICAgICAgYXdhaXQgYXN5bmNpby5zbGVlcCgyKQogICAgICAgIHVzZXJpZCA9IGV2ZW50LmNoYXRfaWQKICAgICAgICByZWFzb24gPSBldmVudC5wYXR0ZXJuX21hdGNoLmdyb3VwKDEpCiAgICBlbHNlOgogICAgICAgIHVzZXIsIHJlYXNvbiA9IGF3YWl0IGdldF91c2VyX2Zyb21fZXZlbnQoZXZlbnQpCiAgICAgICAgaWYgbm90IHVzZXI6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGlmIHVzZXIuaWQgPT0gam10aG9uLnVpZDoKICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGVkaXRfb3JfcmVwbHkoCiAgICAgICAgICAgICAgICBldmVudCwgIirimbAuLi4gLiDZhNmF2YDYp9iw2Kcg2KrgoqrZitmA2K8g2KPZhiDYqtiw2YfYqCDZhNmE2K3Zhdin2YUg2J8gIC4u4pmwKioiCiAgICAgICAgICAgICkKICAgICAgICB1c2VyaWQgPSB1c2VyLmlkCiAgICB0cnk6CiAgICAgICAgdXNlciA9IChhd2FpdCBldmVudC5jbGllbnQoR2V0RnVsbFVzZXJSZXF1ZXN0KHVzZXJpZCkpKS51c2VyCiAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgIHJldHVybiBhd2FpdCBlZGl0X29yX3JlcGx5KAogICAgICAgICAgICBldmVudCwgIirimbAuLi4g2LrZitmA2LEg2YLZgNin2K/YsSDYudmA2YTZiSDYrNmA2YTYqCDZhdmA2LnZhNmI2YXYp9iqINin2YTZgNi02K7YtSAuLuKZsCoqIgogICAgICAgICkKICAgIGlmIGlzX211dGVkKHVzZXJpZCwgImdtdXRlIik6CiAgICAgICAgcmV0dXJuIGF3YWl0IGVkaXRfb3JfcmVwbHkoCiAgICAgICAgICAgIGV2ZW50LAogICAgICAgICAgICBmIirimbAuLi4g2YfZgNiw2Kcg2KfZhNi02YDYrti1INio2KfZhNit2YXYp9mFINin2LXZhNinIC4u4pmwKioiLAogICAgICAgICkKICAgIHRyeToKICAgICAgICBtdXRlKHVzZXJpZCwgImdtdXRlIikKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBhd2FpdCBlZGl0X29yX3JlcGx5KGV2ZW50LCBmIioq2K7ZgNi32KMqKlxuYHtlfWAiKQogICAgZWxzZToKICAgICAgICBpZiByZWFzb246CiAgICAgICAgICAgIGF3YWl0IGVkaXRfb3JfcmVwbHkoCiAgICAgICAgICAgICAgICBldmVudCwKICAgICAgICAgICAgICAgIGYiKiogICAg2KfZhNmF2LPYqtiu2K/ZhSDZhNmC2K8g2LDZh9ioINmE2YTYrdmF2KfZhSDYp9mE2KLZhiAg4pmwICoqIiwKICAgICAgICAgICAgKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGF3YWl0IGVkaXRfb3JfcmVwbHkoCiAgICAgICAgICAgICAgICBldmVudCwKICAgICAgICAgICAgICAgIGYiKiogINin2YTZhdiz2KrYrtiv2YUg2YTZgtivINiw2YfYqCDZhNmE2K3Zhdin2YUg2KfZhNii2YYgIOKZsCAqKiIsCiAgICAgICAgICAgICkKICAgIGlmIEJPVExPRzoKICAgICAgICByZXBseSA9IGF3YWl0IGV2ZW50LmdldF9yZXBseV9tZXNzYWdlKCkKICAgICAgICBpZiByZWFzb246CiAgICAgICAgICAgIGF3YWl0IGV2ZW50LmNsaWVudC5zZW5kX21lc3NhZ2UoCiAgICAgICAgICAgICAgICBCT1RMT0dfQ0hBVElELAogICAgICAgICAgICAgICAgIiDYp9mE2YDZg9iq2YVcbiIKICAgICAgICAgICAgICAgIGYiKirYp9mE2YXYs9iq2K7Yr9mFIDoqKiB7X2Zvcm1hdC5tZW50aW9udXNlcih1c2VyLmZpcnN0X25hbWUgLHVzZXIuaWQpfSBcbiIKICAgICAgICAgICAgICAgIGYiKirYp9mE2LPYqNioIDoqKiBge3JlYXNvbn1gIiwKICAgICAgICAgICAgKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGF3YWl0IGV2ZW50LmNsaWVudC5zZW5kX21lc3NhZ2UoCiAgICAgICAgICAgICAgICBCT1RMT0dfQ0hBVElELAogICAgICAgICAgICAgICAgIiDYp9mE2YDZg9iq2YVcbiIKICAgICAgICAgICAgICAgIGYiKirYp9mE2YXYs9iq2K7Yr9mFIDoqKiB7X2Zvcm1hdC5tZW50aW9udXNlcih1c2VyLmZpcnN0X25hbWUgLHVzZXIuaWQpfSBcbiIsCiAgICAgICAgICAgICkKICAgICAgICBpZiByZXBseToKICAgICAgICAgICAgYXdhaXQgcmVwbHkuZm9yd2FyZF90byhCT1RMT0dfQ0hBVElEKQoKCiMgPT09PT09PT09PT09PT09PT09PSDYp9mE2LrZgNmA2YDZgNmA2YDZgNmA2YDZgNmA2YDZgNin2KEg2KfZhNmD2YDZgNmA2YDZgNmA2YDZgNmA2YDZgNmA2YDZgNmA2KrZhSAgPT09PT09PT09PT09PT09PT09PSAgIwoKCkBqbXRob24uYXJfY21kKAogICAgcGF0dGVybj0i2YPZhdmE2KooPzpcc3wkKShbXHNcU10qKSIsCiAgICBjb21tYW5kPSgi2YPZhdmE2KoiLCBwbHVnaW5fY2F0ZWdvcnkpLAogICAgaW5mbz17CiAgICAgICAgImhlYWRlciI6ICJUbyB1bm11dGUgdGhlIHBlcnNvbiBpbiBhbGwgZ3JvdXBzIHdoZXJlIHlvdSB3ZXJlIGFkbWluLiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoaXMgd2lsbCB3b3JrIG9ubHkgaWYgeW91IG11dGUgdGhhdCBwZXJzb24gYnkgeW91ciBnbXV0ZSBjb21tYW5kLiIsCiAgICAgICAgInVzYWdlIjogInt0cn11bmdtdXRlIDx1c2VybmFtZS9yZXBseT4iLAogICAgfSwKKQphc3luYyBkZWYgZW5kZ211dGUoZXZlbnQpOgogICAgIlRvIHJlbW92ZSBnbXV0ZSBvbiB0aGF0IHBlcnNvbi4iCiAgICBpZiBldmVudC5pc19wcml2YXRlOgogICAgICAgIGF3YWl0IGV2ZW50LmVkaXQoIioq4pmwLi4uINmC2YDYryDYqtit2YDYr9irINis2YHYtdipINi62YrYsSDZhdiq2YjZgti52KkgLi4u4pmwKioiKQogICAgICAgIGF3YWl0IGFzeW5jaW8uc2xlZXAoMikKICAgICAgICB1c2VyaWQgPSBldmVudC5jaGF0X2lkCiAgICAgICAgcmVhc29uID0gZXZlbnQucGF0dGVybl9tYXRjaC5ncm91cCgxKQogICAgZWxzZToKICAgICAgICB1c2VyLCByZWFzb24gPSBhd2FpdCBnZXRfdXNlcl9mcm9tX2V2ZW50KGV2ZW50KQogICAgICAgIGlmIG5vdCB1c2VyOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBpZiB1c2VyLmlkID09IGptdGhvbi51aWQ6CiAgICAgICAgICAgIHJldHVybiBhd2FpdCBlZGl0X29yX3JlcGx5KGV2ZW50LCAiKirimbAuLi4g2YTZhdmA2KfYsNinINiq4KKq2YrZgNivINij2YYg2KrYsNmH2Kgg2YTZhNit2YXYp9mFICDYny4uLuKZsCoqIikKICAgICAgICB1c2VyaWQgPSB1c2VyLmlkCiAgICB0cnk6CiAgICAgICAgdXNlciA9IChhd2FpdCBldmVudC5jbGllbnQoR2V0RnVsbFVzZXJSZXF1ZXN0KHVzZXJpZCkpKS51c2VyCiAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgIHJldHVybiBhd2FpdCBlZGl0X29yX3JlcGx5KAogICAgICAgICAgICBldmVudCwgIioq4pmwLi4uINi62YrZgOCiqiDZgtmA2KfYr+CiqiDYudmA2YTZiSDYrNmA2YTYqCDZhdmA2LnZhNmI2YXYp9iqINin2YTZgNi02K7YtSAuLi7imbAqKiIKICAgICAgICApCiAgICBpZiBub3QgaXNfbXV0ZWQodXNlcmlkLCAiZ211dGUiKToKICAgICAgICByZXR1cm4gYXdhaXQgZWRpdF9vcl9yZXBseSgKICAgICAgICAgICAgZXZlbnQsIGYiKirimbAuLi4g2YfZgNiw2Kcg2KfZhNi02YDYrti1INmE2YrYsyDZgdmKINin2YTYrdmF2KfZhSDYp9i12YTYpyAgLi4u4pmwKioiCiAgICAgICAgKQogICAgdHJ5OgogICAgICAgIHVubXV0ZSh1c2VyaWQsICJnbXV0ZSIpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgYXdhaXQgZWRpdF9vcl9yZXBseShldmVudCwgZiIqKtiu2LfZgNijKipcbmB7ZX1gIikKICAgIGVsc2U6CiAgICAgICAgaWYgcmVhc29uOgogICAgICAgICAgICBhd2FpdCBlZGl0X29yX3JlcGx5KAogICAgICAgICAgICAgICAgZXZlbnQsCiAgICAgICAgICAgICAgICBmIioqINin2YTZhdiz2KrYrtiv2YUg2YTZgtivINiu2LHYrCDZhdmGINin2YTYrdmF2KfZhSDYqNmG2KzYp9itIOKZsNiMICoqIiwKICAgICAgICAgICAgKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGF3YWl0IGVkaXRfb3JfcmVwbHkoCiAgICAgICAgICAgICAgICBldmVudCwKICAgICAgICAgICAgICAgIGYiKiog2KfZhNmF2LPYqtiu2K/ZhSDZhNmC2K8g2K7YsdisINmF2YYg2KfZhNit2YXYp9mFINio2YbYrNin2K0gICAg4pmw2IwgKioiLAogICAgICAgICAgICApCiAgICBpZiBCT1RMT0c6CiAgICAgICAgaWYgcmVhc29uOgogICAgICAgICAgICBhd2FpdCBldmVudC5jbGllbnQuc2VuZF9tZXNzYWdlKAogICAgICAgICAgICAgICAgQk9UTE9HX0NIQVRJRCwKICAgICAgICAgICAgICAgICLYjCDYp9mE2LrZgNin2KEg2KfZhNmA2YPYqtmFXG4iCiAgICAgICAgICAgICAgICBmIioq2KfZhNmF2LPYqtiu2K/ZhSA6Kioge19mb3JtYXQubWVudGlvbnVzZXIodXNlci5maXJzdF9uYW1lICx1c2VyLmlkKX0gXG4iCiAgICAgICAgICAgICAgICBmIioq2KfZhNiz2KjYqCA6KiogYHtyZWFzb259YCIsCiAgICAgICAgICAgICkKICAgICAgICBlbHNlOgogICAgICAgICAgICBhd2FpdCBldmVudC5jbGllbnQuc2VuZF9tZXNzYWdlKAogICAgICAgICAgICAgICAgQk9UTE9HX0NIQVRJRCwKICAgICAgICAgICAgICAgICIg2KfZhNi62YDYp9ihINin2YTZgNmD2KrZhSBcbiIKICAgICAgICAgICAgICAgIGYiKirYp9mE2YXYs9iq2K7Yr9mFIDoqKiB7X2Zvcm1hdC5tZW50aW9udXNlcih1c2VyLmZpcnN0X25hbWUgLHVzZXIuaWQpfSBcbiIsCiAgICAgICAgICAgICkKCgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gIwoKCkBqbXRob24uYXJfY21kKGluY29taW5nPVRydWUpCmFzeW5jIGRlZiB3YXRjaGVyKGV2ZW50KToKICAgIGlmIGlzX211dGVkKGV2ZW50LnNlbmRlcl9pZCwgImdtdXRlIik6CiAgICAgICAgYXdhaXQgZXZlbnQuZGVsZXRlKCkKCgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gICMK'))
